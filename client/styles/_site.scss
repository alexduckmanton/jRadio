$site_width: 85%;
$site_margin: ((100% - $site_width)/2) / $site_width;
$site_end_width: $site_width + $site_width * $site_margin;
$site_margin: $site_margin * 100%;
$site_speed: $default-transition-duration * 2;

.site {
    padding-bottom: 2em;
    text-align: center;

    position: fixed;
    top: 0;
    right: 0;
    height: 9999px;
    min-height: 100%;

    @include box-sizing(border-box);

    .tracks:after {
        content: '';
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0;
        right: 0;
        opacity: .8;
        z-index: 100;

        @include transition-property(opacity, width);
        @include transition-duration($site_speed, 0s);
    }

    &.active {
        height: inherit;
        position: absolute;

        .tracks:after {
            width: 0;
            opacity: 0;
            @include transition-delay(0, $site_speed);
        }
    }
}

// site width and layout
// mixins re-used in larger layouts
@mixin site_position($x) {
    @include transform3d( translate3d($x,0,0) );

    &.show_tray {
        @include transform3d( translate3d($x,$played_height,0) );
    }
}

@mixin site_width($site_width: 85%) {
    .site {
        width: $site_width;

        &.active ~ &:last-child {
            width: $site_end_width;
        }

        &.active:last-child {
            width: $site_end_width;
        }
    }

    .player {
        & + .site {
            width: $site_end_width;
        }
    }
}

@mixin site_layout( $elem,
                    $active_pos: -$site_margin,
                    $first_site_pos: 0,
                    $first_active_pos: 0,
                    $last_site_pos: -100%,
                    $last_active_pos: -$site_margin + .75%
    ) {

    .player + .site {
        #{$elem} { @include site_position($first_site_pos); }
    }

    .player + .site.active {
        #{$elem} { @include site_position($first_active_pos); }
    }

    .site {
        #{$elem} {
            @include single-transition(transform);
            @include transition-property(-webkit-transform, -moz-transform, -ms-transform, -o-transform, transform);
            @include site_position(0);
            @include transition-duration($site_speed);
        }

        &.active {
            #{$elem} { @include site_position($active_pos); }
        }

        &.active ~ & {
            #{$elem} { @include site_position(-100% - $site_margin); }
        }

        &.active ~ &:last-child {
            #{$elem} { @include site_position($last_site_pos); }
        }

        &.active:last-child {
            #{$elem} { @include site_position($last_active_pos); }
        }
    }
}

@include site_width($site_width);
@include site_layout('&');
